{"version":3,"sources":["api.ts","pages/dashboard/state.ts","pages/dashboard/node-info/LastUpdated.tsx","common/UsageBar.tsx","pages/dashboard/node-info/features/CPU.tsx","common/formatUtils.ts","pages/dashboard/node-info/features/Disk.tsx","pages/dashboard/node-info/features/Errors.tsx","pages/dashboard/node-info/features/Host.tsx","pages/dashboard/node-info/features/Logs.tsx","pages/dashboard/node-info/features/RAM.tsx","pages/dashboard/node-info/features/Received.tsx","pages/dashboard/node-info/features/Sent.tsx","pages/dashboard/node-info/features/Uptime.tsx","pages/dashboard/node-info/features/Workers.tsx","pages/dashboard/node-info/NodeRowGroup.tsx","pages/dashboard/node-info/TotalRow.tsx","pages/dashboard/node-info/NodeInfo.tsx","pages/dashboard/ray-config/RayConfig.tsx","pages/dashboard/Dashboard.tsx","common/DialogWithTitle.tsx","common/NumberedLines.tsx","pages/dashboard/dialogs/errors/Errors.tsx","pages/dashboard/dialogs/logs/Logs.tsx","store.ts","App.tsx","index.tsx"],"names":["base","window","location","origin","get","path","params","a","url","URL","Object","entries","key","value","searchParams","set","fetch","toString","response","json","result","error","Error","getRayConfig","getNodeInfo","getErrors","hostname","pid","getLogs","slice","createSlice","name","initialState","rayConfig","nodeInfo","lastUpdatedAt","reducers","setRayConfig","state","action","payload","setNodeInfo","Date","now","setError","dashboardActions","actions","dashboardReducer","reducer","LastUpdated","this","props","classes","className","root","Typography","lastUpdated","toLocaleString","React","Component","connect","dashboard","withStyles","theme","createStyles","marginTop","spacing","color","palette","text","secondary","fontSize","textAlign","main","UsageBar","percent","Math","max","minColor","leftColor","rightColor","ratio","r1","g1","b1","blend","min","gradient","join","inner","style","background","borderColor","divider","borderStyle","borderWidth","paddingLeft","paddingRight","ClusterCPU","cpuWeightedAverage","input","length","totalWeightTimesValue","totalWeight","weight","getWeightedAverage","nodes","map","node","cpus","cpu","minWidth","toFixed","NodeCPU","WorkerCPU","worker","cpu_percent","formatByteAmount","amount","unit","pow","formatUsage","used","total","usedFormatted","totalFormatted","formatDuration","durationInSeconds","durationSeconds","floor","durationMinutes","durationHours","durationDays","pad","padStart","ClusterDisk","disk","NodeDisk","WorkerDisk","component","variant","makeClusterErrors","errorCounts","totalErrorCount","ip","Fragment","makeNodeErrors","Link","RouterLink","to","makeWorkerErrors","perWorker","ClusterHost","NodeHost","WorkerHost","cmdline","split","makeClusterLogs","logCounts","totalLogCount","makeNodeLogs","makeWorkerLogs","ClusterRAM","mem","NodeRAM","WorkerRAM","memory_info","rss","ClusterReceived","totalReceived","net","NodeReceived","WorkerReceived","ClusterSent","totalSent","NodeSent","WorkerSent","getUptime","bootTime","ClusterUptime","NodeUptime","boot_time","WorkerUptime","create_time","ClusterWorkers","totalWorkers","totalCpus","workers","NodeWorkers","WorkerWorkers","NodeRowGroup","expanded","toggleExpand","setState","features","NodeFeature","WorkerFeature","TableRow","hover","TableCell","classNames","cell","expandCollapseCell","onClick","expandCollapseIcon","index","padding","cursor","verticalAlign","TotalRow","ClusterFeature","totalIcon","borderTopColor","borderTopStyle","borderTopWidth","mapDispatchToProps","NodeInfo","refreshNodeInfo","setTimeout","clients","client","keys","log_counts","count","error_counts","Table","table","TableHead","TableBody","backgroundColor","paper","RayConfig","refreshRayConfig","formattedRayConfig","autoscaling_mode","head_type","worker_type","min_workers","initial_workers","max_workers","idle_timeout_minutes","width","paddingTop","paddingBottom","Dashboard","DialogWithTitle","handleClose","title","Dialog","fullWidth","maxWidth","onClose","open","scroll","IconButton","closeButton","children","position","right","top","zIndex","borderBottomColor","borderBottomStyle","borderBottomWidth","lineHeight","marginBottom","NumberedLines","lines","line","lineNumber","data-line-number","overflowX","fontFamily","content","whiteSpace","Errors","history","push","match","errors","header","message","timestamp","trim","fade","borderLeftColor","borderLeftStyle","borderLeftWidth","Logs","log","primary","store","configureStore","devTools","process","App","CssBaseline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbb441ae.chunk.js","sourcesContent":["const base =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8080\"\n    : window.location.origin;\n\n// TODO(mitchellstern): Add JSON schema validation for the responses.\nconst get = async <T>(path: string, params: { [key: string]: any }) => {\n  const url = new URL(path, base);\n  for (const [key, value] of Object.entries(params)) {\n    url.searchParams.set(key, value);\n  }\n\n  const response = await fetch(url.toString());\n  const json = await response.json();\n\n  const { result, error } = json;\n\n  if (error !== null) {\n    throw Error(error);\n  }\n\n  return result as T;\n};\n\nexport interface RayConfigResponse {\n  min_workers: number;\n  max_workers: number;\n  initial_workers: number;\n  autoscaling_mode: string;\n  idle_timeout_minutes: number;\n  head_type: string;\n  worker_type: string;\n}\n\nexport const getRayConfig = () => get<RayConfigResponse>(\"/api/ray_config\", {});\n\nexport interface NodeInfoResponse {\n  clients: Array<{\n    now: number;\n    hostname: string;\n    ip: string;\n    boot_time: number; // System boot time expressed in seconds since epoch\n    cpu: number; // System-wide CPU utilization expressed as a percentage\n    cpus: [number, number]; // Number of logical CPUs and physical CPUs\n    mem: [number, number, number]; // Total, available, and used percentage of memory\n    disk: {\n      [path: string]: {\n        total: number;\n        free: number;\n        used: number;\n        percent: number;\n      };\n    };\n    load_avg: [[number, number, number], [number, number, number]];\n    net: [number, number]; // Sent and received network traffic in bytes / second\n    workers: Array<{\n      pid: number;\n      create_time: number;\n      cmdline: string[];\n      cpu_percent: number;\n      cpu_times: {\n        system: number;\n        children_system: number;\n        user: number;\n        children_user: number;\n      };\n      memory_info: {\n        pageins: number;\n        pfaults: number;\n        vms: number;\n        rss: number;\n      };\n      memory_full_info: null; // Currently unused as it requires superuser permission on some systems\n    }>;\n  }>;\n  log_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n  error_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n}\n\nexport const getNodeInfo = () => get<NodeInfoResponse>(\"/api/node_info\", {});\n\nexport interface ErrorsResponse {\n  [pid: string]: Array<{\n    message: string;\n    timestamp: number;\n    type: string;\n  }>;\n}\n\nexport const getErrors = (hostname: string, pid: string | undefined) =>\n  get<ErrorsResponse>(\"/api/errors\", { hostname, pid: pid || \"\" });\n\nexport interface LogsResponse {\n  [pid: string]: string[];\n}\n\nexport const getLogs = (hostname: string, pid: string | undefined) =>\n  get<LogsResponse>(\"/api/logs\", { hostname, pid: pid || \"\" });\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { NodeInfoResponse, RayConfigResponse } from \"../../api\";\n\nconst name = \"dashboard\";\n\ninterface State {\n  rayConfig: RayConfigResponse | null;\n  nodeInfo: NodeInfoResponse | null;\n  lastUpdatedAt: number | null;\n  error: string | null;\n}\n\nconst initialState: State = {\n  rayConfig: null,\n  nodeInfo: null,\n  lastUpdatedAt: null,\n  error: null\n};\n\nconst slice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setRayConfig: (state, action: PayloadAction<RayConfigResponse>) => {\n      state.rayConfig = action.payload;\n    },\n    setNodeInfo: (state, action: PayloadAction<NodeInfoResponse>) => {\n      state.nodeInfo = action.payload;\n      state.lastUpdatedAt = Date.now();\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    }\n  }\n});\n\nexport const dashboardActions = slice.actions;\nexport const dashboardReducer = slice.reducer;\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(2)\n    },\n    lastUpdated: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\"\n    },\n    error: {\n      color: theme.palette.error.main,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\"\n    }\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  lastUpdatedAt: state.dashboard.lastUpdatedAt,\n  error: state.dashboard.error\n});\n\nclass LastUpdated extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  render() {\n    const { classes, lastUpdatedAt, error } = this.props;\n    return (\n      <div className={classes.root}>\n        {lastUpdatedAt !== null && (\n          <Typography className={classes.lastUpdated}>\n            Last updated: {new Date(lastUpdatedAt).toLocaleString()}\n          </Typography>\n        )}\n        {error !== null && (\n          <Typography className={classes.error}>{error}</Typography>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(LastUpdated));\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport React from \"react\";\n\nconst blend = (\n  [r1, g1, b1]: number[],\n  [r2, g2, b2]: number[],\n  ratio: number\n) => [\n  r1 * (1 - ratio) + r2 * ratio,\n  g1 * (1 - ratio) + g2 * ratio,\n  b1 * (1 - ratio) + b2 * ratio\n];\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1\n    },\n    inner: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1)\n    }\n  });\n\ninterface Props {\n  percent: number;\n  text: string;\n}\n\nclass UsageBar extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, text } = this.props;\n\n    let { percent } = this.props;\n    percent = Math.max(percent, 0);\n    percent = Math.min(percent, 100);\n\n    const minColor = [0, 255, 0];\n    const maxColor = [255, 0, 0];\n\n    const leftColor = minColor;\n    const rightColor = blend(minColor, maxColor, percent / 100);\n    const alpha = 0.2;\n\n    const gradient = `\n      linear-gradient(\n        to right,\n        rgba(${leftColor.join(\",\")}, ${alpha}) 0%,\n        rgba(${rightColor.join(\",\")}, ${alpha}) ${percent}%,\n        transparent ${percent}%\n      )\n    `;\n\n    // Use a nested `div` here because the right border is affected by the\n    // gradient background otherwise.\n    return (\n      <div className={classes.root}>\n        <div className={classes.inner} style={{ background: gradient }}>\n          {text}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(UsageBar);\n","import React from \"react\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nconst getWeightedAverage = (\n  input: {\n    weight: number;\n    value: number;\n  }[]\n) => {\n  if (input.length === 0) {\n    return 0;\n  }\n\n  let totalWeightTimesValue = 0;\n  let totalWeight = 0;\n  for (const { weight, value } of input) {\n    totalWeightTimesValue += weight * value;\n    totalWeight += weight;\n  }\n  return totalWeightTimesValue / totalWeight;\n};\n\nexport const ClusterCPU: ClusterFeatureComponent = ({ nodes }) => {\n  const cpuWeightedAverage = getWeightedAverage(\n    nodes.map(node => ({ weight: node.cpus[0], value: node.cpu }))\n  );\n  return (\n    <div style={{ minWidth: 60 }}>\n      <UsageBar\n        percent={cpuWeightedAverage}\n        text={`${cpuWeightedAverage.toFixed(1)}%`}\n      />\n    </div>\n  );\n};\n\nexport const NodeCPU: NodeFeatureComponent = ({ node }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar percent={node.cpu} text={`${node.cpu.toFixed(1)}%`} />\n  </div>\n);\n\nexport const WorkerCPU: WorkerFeatureComponent = ({ worker }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar\n      percent={worker.cpu_percent}\n      text={`${worker.cpu_percent.toFixed(1)}%`}\n    />\n  </div>\n);\n","export const formatByteAmount = (\n  amount: number,\n  unit: \"mebibyte\" | \"gibibyte\"\n) =>\n  `${(\n    amount / (unit === \"mebibyte\" ? Math.pow(1024, 2) : Math.pow(1024, 3))\n  ).toFixed(1)} ${unit === \"mebibyte\" ? \"MiB\" : \"GiB\"}`;\n\nexport const formatUsage = (\n  used: number,\n  total: number,\n  unit: \"mebibyte\" | \"gibibyte\"\n) => {\n  const usedFormatted = formatByteAmount(used, unit);\n  const totalFormatted = formatByteAmount(total, unit);\n  const percent = (100 * used) / total;\n  return `${usedFormatted} / ${totalFormatted} (${percent.toFixed(0)}%)`;\n};\n\nexport const formatDuration = (durationInSeconds: number) => {\n  const durationSeconds = Math.floor(durationInSeconds) % 60;\n  const durationMinutes = Math.floor(durationInSeconds / 60) % 60;\n  const durationHours = Math.floor(durationInSeconds / 60 / 60) % 24;\n  const durationDays = Math.floor(durationInSeconds / 60 / 60 / 24);\n  const pad = (value: number) => value.toString().padStart(2, \"0\");\n  return [\n    durationDays ? `${durationDays}d` : \"\",\n    `${pad(durationHours)}h`,\n    `${pad(durationMinutes)}m`,\n    `${pad(durationSeconds)}s`\n  ].join(\" \");\n};\n","import Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { formatUsage } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nexport const ClusterDisk: ClusterFeatureComponent = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.disk[\"/\"].used;\n    total += node.disk[\"/\"].total;\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\")}\n    />\n  );\n};\n\nexport const NodeDisk: NodeFeatureComponent = ({ node }) => (\n  <UsageBar\n    percent={(100 * node.disk[\"/\"].used) / node.disk[\"/\"].total}\n    text={formatUsage(node.disk[\"/\"].used, node.disk[\"/\"].total, \"gibibyte\")}\n  />\n);\n\nexport const WorkerDisk: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nexport const makeClusterErrors = (errorCounts: {\n  [ip: string]: {\n    perWorker: {\n      [pid: string]: number;\n    };\n    total: number;\n  };\n}): ClusterFeatureComponent => ({ nodes }) => {\n  let totalErrorCount = 0;\n  for (const node of nodes) {\n    if (node.ip in errorCounts) {\n      totalErrorCount += errorCounts[node.ip].total;\n    }\n  }\n  return totalErrorCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalErrorCount.toLocaleString()}{\" \"}\n      {totalErrorCount === 1 ? \"error\" : \"errors\"}\n    </React.Fragment>\n  );\n};\n\nexport const makeNodeErrors = (errorCounts: {\n  perWorker: { [pid: string]: number };\n  total: number;\n}): NodeFeatureComponent => ({ node }) =>\n  errorCounts.total === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <Link component={RouterLink} to={`/errors/${node.hostname}`}>\n      View all errors ({errorCounts.total.toLocaleString()})\n    </Link>\n  );\n\nexport const makeWorkerErrors = (errorCounts: {\n  perWorker: { [pid: string]: number };\n  total: number;\n}): WorkerFeatureComponent => ({ node, worker }) =>\n  errorCounts.perWorker[worker.pid] === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <Link component={RouterLink} to={`/errors/${node.hostname}/${worker.pid}`}>\n      View errors ({errorCounts.perWorker[worker.pid].toLocaleString()})\n    </Link>\n  );\n","import React from \"react\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nexport const ClusterHost: ClusterFeatureComponent = ({ nodes }) => (\n  <React.Fragment>\n    Totals ({nodes.length.toLocaleString()}{\" \"}\n    {nodes.length === 1 ? \"host\" : \"hosts\"})\n  </React.Fragment>\n);\n\nexport const NodeHost: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>\n    {node.hostname} ({node.ip})\n  </React.Fragment>\n);\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// first portion here for display in the \"Host\" column. Note that this will\n// always be `ray` under the current setup, but it may vary in the future.\nexport const WorkerHost: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>\n    {worker.cmdline[0].split(\"::\", 2)[0]} (PID: {worker.pid})\n  </React.Fragment>\n);\n","import Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nexport const makeClusterLogs = (logCounts: {\n  [ip: string]: {\n    perWorker: {\n      [pid: string]: number;\n    };\n    total: number;\n  };\n}): ClusterFeatureComponent => ({ nodes }) => {\n  let totalLogCount = 0;\n  for (const node of nodes) {\n    if (node.ip in logCounts) {\n      totalLogCount += logCounts[node.ip].total;\n    }\n  }\n  return totalLogCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalLogCount.toLocaleString()} {totalLogCount === 1 ? \"line\" : \"lines\"}\n    </React.Fragment>\n  );\n};\n\nexport const makeNodeLogs = (logCounts: {\n  perWorker: { [pid: string]: number };\n  total: number;\n}): NodeFeatureComponent => ({ node }) =>\n  logCounts.total === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <Link component={RouterLink} to={`/logs/${node.hostname}`}>\n      View all logs ({logCounts.total.toLocaleString()}{\" \"}\n      {logCounts.total === 1 ? \"line\" : \"lines\"})\n    </Link>\n  );\n\nexport const makeWorkerLogs = (logCounts: {\n  perWorker: { [pid: string]: number };\n  total: number;\n}): WorkerFeatureComponent => ({ node, worker }) =>\n  logCounts.perWorker[worker.pid] === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <Link component={RouterLink} to={`/logs/${node.hostname}/${worker.pid}`}>\n      View log ({logCounts.perWorker[worker.pid].toLocaleString()}{\" \"}\n      {logCounts.perWorker[worker.pid] === 1 ? \"line\" : \"lines\"})\n    </Link>\n  );\n","import React from \"react\";\nimport { formatByteAmount, formatUsage } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nexport const ClusterRAM: ClusterFeatureComponent = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.mem[0] - node.mem[1];\n    total += node.mem[0];\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\")}\n    />\n  );\n};\n\nexport const NodeRAM: NodeFeatureComponent = ({ node }) => (\n  <UsageBar\n    percent={(100 * (node.mem[0] - node.mem[1])) / node.mem[0]}\n    text={formatUsage(node.mem[0] - node.mem[1], node.mem[0], \"gibibyte\")}\n  />\n);\n\nexport const WorkerRAM: WorkerFeatureComponent = ({ node, worker }) => (\n  <UsageBar\n    percent={(100 * worker.memory_info.rss) / node.mem[0]}\n    text={formatByteAmount(worker.memory_info.rss, \"mebibyte\")}\n  />\n);\n","import Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nexport const ClusterReceived: ClusterFeatureComponent = ({ nodes }) => {\n  let totalReceived = 0;\n  for (const node of nodes) {\n    totalReceived += node.net[1];\n  }\n  return (\n    <React.Fragment>\n      {formatByteAmount(totalReceived, \"mebibyte\")}/s\n    </React.Fragment>\n  );\n};\n\nexport const NodeReceived: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatByteAmount(node.net[1], \"mebibyte\")}/s</React.Fragment>\n);\n\nexport const WorkerReceived: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nexport const ClusterSent: ClusterFeatureComponent = ({ nodes }) => {\n  let totalSent = 0;\n  for (const node of nodes) {\n    totalSent += node.net[0];\n  }\n  return (\n    <React.Fragment>{formatByteAmount(totalSent, \"mebibyte\")}/s</React.Fragment>\n  );\n};\n\nexport const NodeSent: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatByteAmount(node.net[0], \"mebibyte\")}/s</React.Fragment>\n);\n\nexport const WorkerSent: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { formatDuration } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nconst getUptime = (bootTime: number) => Date.now() / 1000 - bootTime;\n\nexport const ClusterUptime: ClusterFeatureComponent = ({ nodes }) => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nexport const NodeUptime: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatDuration(getUptime(node.boot_time))}</React.Fragment>\n);\n\nexport const WorkerUptime: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>\n    {formatDuration(getUptime(worker.create_time))}\n  </React.Fragment>\n);\n","import React from \"react\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent\n} from \"./types\";\n\nexport const ClusterWorkers: ClusterFeatureComponent = ({ nodes }) => {\n  let totalWorkers = 0;\n  let totalCpus = 0;\n  for (const node of nodes) {\n    totalWorkers += node.workers.length;\n    totalCpus += node.cpus[0];\n  }\n  return (\n    <React.Fragment>\n      {totalWorkers.toLocaleString()}{\" \"}\n      {totalWorkers === 1 ? \"worker\" : \"workers\"} / {totalCpus.toLocaleString()}{\" \"}\n      {totalCpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\nexport const NodeWorkers: NodeFeatureComponent = ({ node }) => {\n  const workers = node.workers.length;\n  const cpus = node.cpus[0];\n  return (\n    <React.Fragment>\n      {workers.toLocaleString()} {workers === 1 ? \"worker\" : \"workers\"} /{\" \"}\n      {cpus.toLocaleString()} {cpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// second portion here for display in the \"Workers\" column.\nexport const WorkerWorkers: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>{worker.cmdline[0].split(\"::\", 2)[1]}</React.Fragment>\n);\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { NodeInfoResponse } from \"../../../api\";\nimport { NodeCPU, WorkerCPU } from \"./features/CPU\";\nimport { NodeDisk, WorkerDisk } from \"./features/Disk\";\nimport { makeNodeErrors, makeWorkerErrors } from \"./features/Errors\";\nimport { NodeHost, WorkerHost } from \"./features/Host\";\nimport { makeNodeLogs, makeWorkerLogs } from \"./features/Logs\";\nimport { NodeRAM, WorkerRAM } from \"./features/RAM\";\nimport { NodeReceived, WorkerReceived } from \"./features/Received\";\nimport { NodeSent, WorkerSent } from \"./features/Sent\";\nimport { NodeUptime, WorkerUptime } from \"./features/Uptime\";\nimport { NodeWorkers, WorkerWorkers } from \"./features/Workers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1)\n      }\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\"\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\"\n    }\n  });\n\ntype ArrayType<T> = T extends Array<infer U> ? U : never;\ntype Node = ArrayType<NodeInfoResponse[\"clients\"]>;\n\ninterface Props {\n  node: Node;\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  };\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  };\n}\n\ninterface State {\n  expanded: boolean;\n}\n\nclass NodeRowGroup extends React.Component<\n  Props & WithStyles<typeof styles>,\n  State\n> {\n  state: State = {\n    expanded: false\n  };\n\n  toggleExpand = () => {\n    this.setState(state => ({\n      expanded: !state.expanded\n    }));\n  };\n\n  render() {\n    const { classes, node, logCounts, errorCounts } = this.props;\n    const { expanded } = this.state;\n\n    const features = [\n      { NodeFeature: NodeHost, WorkerFeature: WorkerHost },\n      { NodeFeature: NodeWorkers, WorkerFeature: WorkerWorkers },\n      { NodeFeature: NodeUptime, WorkerFeature: WorkerUptime },\n      { NodeFeature: NodeCPU, WorkerFeature: WorkerCPU },\n      { NodeFeature: NodeRAM, WorkerFeature: WorkerRAM },\n      { NodeFeature: NodeDisk, WorkerFeature: WorkerDisk },\n      { NodeFeature: NodeSent, WorkerFeature: WorkerSent },\n      { NodeFeature: NodeReceived, WorkerFeature: WorkerReceived },\n      {\n        NodeFeature: makeNodeLogs(logCounts),\n        WorkerFeature: makeWorkerLogs(logCounts)\n      },\n      {\n        NodeFeature: makeNodeErrors(errorCounts),\n        WorkerFeature: makeWorkerErrors(errorCounts)\n      }\n    ];\n\n    return (\n      <React.Fragment>\n        <TableRow hover>\n          <TableCell\n            className={classNames(classes.cell, classes.expandCollapseCell)}\n            onClick={this.toggleExpand}\n          >\n            {!expanded ? (\n              <AddIcon className={classes.expandCollapseIcon} />\n            ) : (\n              <RemoveIcon className={classes.expandCollapseIcon} />\n            )}\n          </TableCell>\n          {features.map(({ NodeFeature }, index) => (\n            <TableCell className={classes.cell} key={index}>\n              <NodeFeature node={node} />\n            </TableCell>\n          ))}\n        </TableRow>\n        {expanded &&\n          node.workers.map((worker, index: number) => (\n            <TableRow hover key={index}>\n              <TableCell className={classes.cell} />\n              {features.map(({ WorkerFeature }, index) => (\n                <TableCell className={classes.cell} key={index}>\n                  <WorkerFeature node={node} worker={worker} />\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(NodeRowGroup);\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport React from \"react\";\nimport { NodeInfoResponse } from \"../../../api\";\nimport { ClusterCPU } from \"./features/CPU\";\nimport { ClusterDisk } from \"./features/Disk\";\nimport { makeClusterErrors } from \"./features/Errors\";\nimport { ClusterHost } from \"./features/Host\";\nimport { makeClusterLogs } from \"./features/Logs\";\nimport { ClusterRAM } from \"./features/RAM\";\nimport { ClusterReceived } from \"./features/Received\";\nimport { ClusterSent } from \"./features/Sent\";\nimport { ClusterUptime } from \"./features/Uptime\";\nimport { ClusterWorkers } from \"./features/Workers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      borderTopColor: theme.palette.divider,\n      borderTopStyle: \"solid\",\n      borderTopWidth: 2,\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1)\n      }\n    },\n    totalIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\"\n    }\n  });\n\ninterface Props {\n  nodes: NodeInfoResponse[\"clients\"];\n  logCounts: {\n    [ip: string]: {\n      perWorker: { [pid: string]: number };\n      total: number;\n    };\n  };\n  errorCounts: {\n    [ip: string]: {\n      perWorker: { [pid: string]: number };\n      total: number;\n    };\n  };\n}\n\nclass TotalRow extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, nodes, logCounts, errorCounts } = this.props;\n\n    const features = [\n      { ClusterFeature: ClusterHost },\n      { ClusterFeature: ClusterWorkers },\n      { ClusterFeature: ClusterUptime },\n      { ClusterFeature: ClusterCPU },\n      { ClusterFeature: ClusterRAM },\n      { ClusterFeature: ClusterDisk },\n      { ClusterFeature: ClusterSent },\n      { ClusterFeature: ClusterReceived },\n      { ClusterFeature: makeClusterLogs(logCounts) },\n      { ClusterFeature: makeClusterErrors(errorCounts) }\n    ];\n\n    return (\n      <TableRow hover>\n        <TableCell className={classes.cell}>\n          <LayersIcon className={classes.totalIcon} />\n        </TableCell>\n        {features.map(({ ClusterFeature }, index) => (\n          <TableCell className={classes.cell} key={index}>\n            <ClusterFeature nodes={nodes} />\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  }\n}\n\nexport default withStyles(styles)(TotalRow);\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getNodeInfo } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\nimport LastUpdated from \"./LastUpdated\";\nimport NodeRowGroup from \"./NodeRowGroup\";\nimport TotalRow from \"./TotalRow\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(2)\n      }\n    },\n    table: {\n      marginTop: theme.spacing(1)\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1)\n      }\n    }\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  nodeInfo: state.dashboard.nodeInfo\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass NodeInfo extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  refreshNodeInfo = async () => {\n    try {\n      const nodeInfo = await getNodeInfo();\n      this.props.setNodeInfo(nodeInfo);\n      this.props.setError(null);\n    } catch (error) {\n      this.props.setError(error.toString());\n    } finally {\n      setTimeout(this.refreshNodeInfo, 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshNodeInfo();\n  }\n\n  render() {\n    const { classes, nodeInfo } = this.props;\n\n    if (nodeInfo === null) {\n      return (\n        <Typography className={classes.root} color=\"textSecondary\">\n          Loading...\n        </Typography>\n      );\n    }\n\n    const logCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    const errorCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    for (const client of nodeInfo.clients) {\n      logCounts[client.ip] = { perWorker: {}, total: 0 };\n      errorCounts[client.ip] = { perWorker: {}, total: 0 };\n      for (const worker of client.workers) {\n        logCounts[client.ip].perWorker[worker.pid] = 0;\n        errorCounts[client.ip].perWorker[worker.pid] = 0;\n      }\n    }\n\n    for (const ip of Object.keys(nodeInfo.log_counts)) {\n      if (ip in logCounts) {\n        for (const [pid, count] of Object.entries(nodeInfo.log_counts[ip])) {\n          logCounts[ip].perWorker[pid] = count;\n          logCounts[ip].total += count;\n        }\n      }\n    }\n\n    for (const ip of Object.keys(nodeInfo.error_counts)) {\n      if (ip in errorCounts) {\n        for (const [pid, count] of Object.entries(nodeInfo.error_counts[ip])) {\n          errorCounts[ip].perWorker[pid] = count;\n          errorCounts[ip].total += count;\n        }\n      }\n    }\n\n    return (\n      <div>\n        <Typography>Node information:</Typography>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell} />\n              <TableCell className={classes.cell}>Host</TableCell>\n              <TableCell className={classes.cell}>Workers</TableCell>\n              <TableCell className={classes.cell}>Uptime</TableCell>\n              <TableCell className={classes.cell}>CPU</TableCell>\n              <TableCell className={classes.cell}>RAM</TableCell>\n              <TableCell className={classes.cell}>Disk</TableCell>\n              <TableCell className={classes.cell}>Sent</TableCell>\n              <TableCell className={classes.cell}>Received</TableCell>\n              <TableCell className={classes.cell}>Logs</TableCell>\n              <TableCell className={classes.cell}>Errors</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {nodeInfo.clients.map(client => (\n              <NodeRowGroup\n                key={client.ip}\n                node={client}\n                logCounts={logCounts[client.ip]}\n                errorCounts={errorCounts[client.ip]}\n              />\n            ))}\n            <TotalRow\n              nodes={nodeInfo.clients}\n              logCounts={logCounts}\n              errorCounts={errorCounts}\n            />\n          </TableBody>\n        </Table>\n        <LastUpdated />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(NodeInfo));\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getRayConfig } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n      width: \"auto\"\n    },\n    cell: {\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(3)\n      }\n    },\n    key: {\n      color: theme.palette.text.secondary\n    }\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  rayConfig: state.dashboard.rayConfig\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass RayConfig extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  refreshRayConfig = async () => {\n    try {\n      const rayConfig = await getRayConfig();\n      this.props.setRayConfig(rayConfig);\n    } catch (error) {\n    } finally {\n      setTimeout(this.refreshRayConfig, 10 * 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshRayConfig();\n  }\n\n  render() {\n    const { classes, rayConfig } = this.props;\n\n    if (rayConfig === null) {\n      return null;\n    }\n\n    const formattedRayConfig = [\n      {\n        key: \"Autoscaling mode\",\n        value: rayConfig.autoscaling_mode\n      },\n      {\n        key: \"Head node type\",\n        value: rayConfig.head_type\n      },\n      {\n        key: \"Worker node type\",\n        value: rayConfig.worker_type\n      },\n      {\n        key: \"Min worker nodes\",\n        value: rayConfig.min_workers\n      },\n      {\n        key: \"Initial worker nodes\",\n        value: rayConfig.initial_workers\n      },\n      {\n        key: \"Max worker nodes\",\n        value: rayConfig.max_workers\n      },\n      {\n        key: \"Idle timeout\",\n        value: `${rayConfig.idle_timeout_minutes} ${\n          rayConfig.idle_timeout_minutes === 1 ? \"minute\" : \"minutes\"\n        }`\n      }\n    ];\n\n    return (\n      <div>\n        <Typography>Ray cluster configuration:</Typography>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}>Setting</TableCell>\n              <TableCell className={classes.cell}>Value</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {formattedRayConfig.map(({ key, value }, index) => (\n              <TableRow key={index}>\n                <TableCell className={classNames(classes.cell, classes.key)}>\n                  {key}\n                </TableCell>\n                <TableCell className={classes.cell}>{value}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(RayConfig));\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport NodeInfo from \"./node-info/NodeInfo\";\nimport RayConfig from \"./ray-config/RayConfig\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4)\n      }\n    }\n  });\n\nclass Dashboard extends React.Component<WithStyles<typeof styles>> {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h5\">Ray Dashboard</Typography>\n        <NodeInfo />\n        <RayConfig />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Dashboard);\n","import Dialog from \"@material-ui/core/Dialog\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3)\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1.5),\n      top: theme.spacing(1.5),\n      zIndex: 1\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      fontSize: \"1.5rem\",\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3)\n    }\n  });\n\ninterface Props {\n  handleClose: () => void;\n  title: string;\n}\n\nclass DialogWithTitle extends React.Component<\n  Props & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, handleClose, title } = this.props;\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n        <Typography className={classes.title}>{title}</Typography>\n        {this.props.children}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(DialogWithTitle);\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      overflowX: \"auto\"\n    },\n    cell: {\n      borderWidth: 0,\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      padding: 0,\n      \"&:last-child\": {\n        paddingRight: 0\n      }\n    },\n    lineNumber: {\n      color: theme.palette.text.secondary,\n      paddingRight: theme.spacing(2),\n      textAlign: \"right\",\n      verticalAlign: \"top\",\n      width: \"1%\",\n      // Use a ::before pseudo-element for the line number so that it won't\n      // interact with user selections or searching.\n      \"&::before\": {\n        content: \"attr(data-line-number)\"\n      }\n    },\n    line: {\n      textAlign: \"left\",\n      whiteSpace: \"pre-wrap\"\n    }\n  });\n\ninterface Props {\n  lines: string[];\n}\n\nclass NumberedLines extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, lines } = this.props;\n    return (\n      <Table>\n        <TableBody>\n          {lines.map((line, index) => (\n            <TableRow key={index}>\n              <TableCell\n                className={classNames(classes.cell, classes.lineNumber)}\n                data-line-number={index + 1}\n              />\n              <TableCell className={classNames(classes.cell, classes.line)}>\n                {line}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n\nexport default withStyles(styles)(NumberedLines);\n","import { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { ErrorsResponse, getErrors } from \"../../../../api\";\nimport DialogWithTitle from \"../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3)\n    },\n    error: {\n      backgroundColor: fade(theme.palette.error.main, 0.04),\n      borderLeftColor: theme.palette.error.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      marginTop: theme.spacing(3),\n      padding: theme.spacing(2)\n    },\n    timestamp: {\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1)\n    }\n  });\n\ninterface State {\n  result: ErrorsResponse | null;\n  error: string | null;\n}\n\nclass Errors extends React.Component<\n  WithStyles<typeof styles> &\n    RouteComponentProps<{ hostname: string; pid: string | undefined }>,\n  State\n> {\n  state: State = {\n    result: null,\n    error: null\n  };\n\n  handleClose = () => {\n    this.props.history.push(\"/\");\n  };\n\n  async componentDidMount() {\n    try {\n      const { match } = this.props;\n      const { hostname, pid } = match.params;\n      const result = await getErrors(hostname, pid);\n      this.setState({ result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, match } = this.props;\n    const { result, error } = this.state;\n\n    const { hostname } = match.params;\n\n    return (\n      <DialogWithTitle handleClose={this.handleClose} title=\"Errors\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, errors]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {errors.length > 0 ? (\n                errors.map(({ message, timestamp }, index) => (\n                  <div className={classes.error} key={index}>\n                    <Typography className={classes.timestamp}>\n                      Error at {new Date(timestamp * 1000).toLocaleString()}\n                    </Typography>\n                    <NumberedLines lines={message.trim().split(\"\\n\")} />\n                  </div>\n                ))\n              ) : (\n                <Typography color=\"textSecondary\">No errors found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Errors);\n","import { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { getLogs, LogsResponse } from \"../../../../api\";\nimport DialogWithTitle from \"../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3)\n    },\n    log: {\n      backgroundColor: fade(theme.palette.primary.main, 0.04),\n      borderLeftColor: theme.palette.primary.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      padding: theme.spacing(2)\n    }\n  });\n\ninterface State {\n  result: LogsResponse | null;\n  error: string | null;\n}\n\nclass Logs extends React.Component<\n  WithStyles<typeof styles> &\n    RouteComponentProps<{ hostname: string; pid: string | undefined }>,\n  State\n> {\n  state: State = {\n    result: null,\n    error: null\n  };\n\n  handleClose = () => {\n    this.props.history.push(\"/\");\n  };\n\n  async componentDidMount() {\n    try {\n      const { match } = this.props;\n      const { hostname, pid } = match.params;\n      const result = await getLogs(hostname, pid);\n      this.setState({ result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, match } = this.props;\n    const { result, error } = this.state;\n\n    const { hostname } = match.params;\n\n    return (\n      <DialogWithTitle handleClose={this.handleClose} title=\"Logs\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, lines]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {lines.length > 0 ? (\n                <div className={classes.log}>\n                  <NumberedLines lines={lines} />\n                </div>\n              ) : (\n                <Typography color=\"textSecondary\">No logs found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logs);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { dashboardReducer } from \"./pages/dashboard/state\";\n\nexport const store = configureStore({\n  reducer: {\n    dashboard: dashboardReducer\n  },\n  devTools: process.env.NODE_ENV === \"development\"\n});\n\nexport type StoreState = ReturnType<typeof store.getState>;\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport Errors from \"./pages/dashboard/dialogs/errors/Errors\";\nimport Logs from \"./pages/dashboard/dialogs/logs/Logs\";\nimport { store } from \"./store\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <CssBaseline />\n          <Dashboard />\n          <Route component={Logs} path=\"/logs/:hostname/:pid?\" />\n          <Route component={Errors} path=\"/errors/:hostname/:pid?\" />\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}